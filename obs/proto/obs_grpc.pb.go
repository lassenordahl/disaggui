// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: obs/proto/obs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CRDBService_ProcessFingerprint_FullMethodName = "/obs.CRDBService/ProcessFingerprint"
)

// CRDBServiceClient is the client API for CRDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRDBServiceClient interface {
	ProcessFingerprint(ctx context.Context, in *Fingerprint, opts ...grpc.CallOption) (*Ack, error)
}

type cRDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCRDBServiceClient(cc grpc.ClientConnInterface) CRDBServiceClient {
	return &cRDBServiceClient{cc}
}

func (c *cRDBServiceClient) ProcessFingerprint(ctx context.Context, in *Fingerprint, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, CRDBService_ProcessFingerprint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CRDBServiceServer is the server API for CRDBService service.
// All implementations must embed UnimplementedCRDBServiceServer
// for forward compatibility
type CRDBServiceServer interface {
	ProcessFingerprint(context.Context, *Fingerprint) (*Ack, error)
	mustEmbedUnimplementedCRDBServiceServer()
}

// UnimplementedCRDBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCRDBServiceServer struct {
}

func (UnimplementedCRDBServiceServer) ProcessFingerprint(context.Context, *Fingerprint) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFingerprint not implemented")
}
func (UnimplementedCRDBServiceServer) mustEmbedUnimplementedCRDBServiceServer() {}

// UnsafeCRDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRDBServiceServer will
// result in compilation errors.
type UnsafeCRDBServiceServer interface {
	mustEmbedUnimplementedCRDBServiceServer()
}

func RegisterCRDBServiceServer(s grpc.ServiceRegistrar, srv CRDBServiceServer) {
	s.RegisterService(&CRDBService_ServiceDesc, srv)
}

func _CRDBService_ProcessFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fingerprint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRDBServiceServer).ProcessFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRDBService_ProcessFingerprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRDBServiceServer).ProcessFingerprint(ctx, req.(*Fingerprint))
	}
	return interceptor(ctx, in, info, handler)
}

// CRDBService_ServiceDesc is the grpc.ServiceDesc for CRDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "obs.CRDBService",
	HandlerType: (*CRDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessFingerprint",
			Handler:    _CRDBService_ProcessFingerprint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "obs/proto/obs.proto",
}
